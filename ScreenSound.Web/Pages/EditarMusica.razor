@page "/EditarMusica/{NomeMusica}"
@inject ArtistasAPI artistasAPI
@inject GeneroAPI generoAPI
@inject MusicasAPI musicaAPI
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Editar Música</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome da música/canção"
                      @bind-Value="nome"
                      Variant="Variant.Outlined"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="ArtistaResponse" Label="Artistas" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="ArtistaDaMusica">
            @if (Artistas is not null)
            {
                @foreach (var artista in Artistas)
                {
                    <MudSelectItem Value="artista" />
                }
            }
        </MudSelect>

        <MudNumericField Class="mt-4" Placeholder="Ano de lançamento"
                         @bind-Value="anoLancamento"
                         Variant="Variant.Outlined"
                         Lines="1"
                         Required="true"
                         RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="GeneroResponse" Label="Gêneros" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ValueChanged="@GeneroOnValueChanged">
            @if (Generos is not null)
            {
                @foreach (var genero in Generos)
                {
                    <MudSelectItem Value="genero" />
                }
            }
            @if (GenerosSelecionados is not null)
            {
                foreach (var genero in GenerosSelecionados)
                {
                    <MudAlert Severity="Severity.Info">@(genero.Nome) adicionado como gênero.</MudAlert>
                }
            }
        </MudSelect>

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="ml-auto"
                       @onclick="Deletar">
                Deletar
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Info"
                       Class="ml-3">
                Voltar
            </MudButton>
        </div>

    </MudForm>

</MudPaper>
@code {
    private string? nome;
    private int? anoLancamento;
    private ICollection<ArtistaResponse>? Artistas { get; set; }
    private ICollection<GeneroResponse>? Generos { get; set; }

    private List<GeneroResponse>? GenerosSelecionados { get; set; } = new();
    private ArtistaResponse? ArtistaDaMusica { get; set; }

    [Parameter]
    public string? NomeMusica { get; set; }

    public MusicaResponse? Musica { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artistas = await artistasAPI.GetArtistasAsync();
        Generos = await generoAPI.GetGenerosAsync();
        Musica = await musicaAPI.GetMusicaPorNomeAsync(NomeMusica!);
        nome = Musica!.Nome;
        anoLancamento = Musica.anoLancamento;
        ArtistaDaMusica = new ArtistaResponse(Musica.ArtistaId, Musica.NomeArtista,"", "");
    }

    private void GeneroOnValueChanged(GeneroResponse genero)
    {
        if (GenerosSelecionados is not null)
        {
            if (!GenerosSelecionados.Contains(genero))
            {
                GenerosSelecionados.Add(genero);
            }
        }
    }

    private void ArtistaSelecionado(ArtistaResponse artista)
    {
        ArtistaDaMusica = artista;
    }
    private List<GeneroRequest> GenerosRequest { get; set; } = new();
    private async Task Deletar()
    {       
        await musicaAPI.DeleteMusicaAsync(Musica!.Id);
        navigationManager.NavigateTo("/MusicasPorArtista");

    }
}

